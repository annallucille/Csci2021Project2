* (TEST 20) set_display_from_batt() 100 %
COMMENTS:
** program: ./test_batt_update "set_display_from_batt() 100 %"

** --- Failure messages --- 
- FAILURE(13): Valgrind detected errors
- FAILURE: Output Mismatch at lines marked

** --- Side by Side Differences ---
- Expect output in: test-results/raw/prob1-20-expect.tmp
- Actual output in: test-results/raw/prob1-20-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
#+BEGIN_SRC sbs-diff
==== EXPECT ====                                                         ==== ACTUAL ====                                                      
{                                                                        {
    // Show 100%, the only case in which the hundreds digit of percent       // Show 100%, the only case in which the hundreds digit of percent
    // is used.                                                              // is used.
    BATT_VOLTAGE_PORT = -1;                                                  BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                                  BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                                  BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                                          batt_t batt = {
      .mlvolts = 4217,                                                         .mlvolts = 4217,
      .percent = 100,                                                          .percent = 100,
      .mode = 1,                                                               .mode = 1,
    };                                                                       };
    int ret = set_display_from_batt(batt, dispint);                          int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                                                 printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                                       printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),                              "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));                                        "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");                             printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                                            BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                                   printf("Display based on dispint:\n");
    print_batt_display();                                                    print_batt_display();
}                                                                        }
---OUTPUT---                                                             ---OUTPUT---
ret: 0                                                                   ret: 0
dispint bits       : 000 11111 0000110 0111111 0111111 001             | dispint bits       : 000 00000 0000000 0000000 0000000 000
index              :  29    24      17      10       3   0               index              :  29    24      17      10       3   0

BATT_VOLTAGE_PORT  : -1                                                  BATT_VOLTAGE_PORT  : -1
BATT_STATUS_PORT   : 111 11111                                           BATT_STATUS_PORT   : 111 11111
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111               BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
index              :  29    24      17      10       3   0               index              :  29    24      17      10       3   0

Display based on dispint:                                                Display based on dispint:
+-^^^-+     #   ####  ####                                             | +-^^^-+                        
|#####|     #   #  #  #  #                                             | |     |                        
|#####|     #   #  #  #  #                                             | |     |                        
|#####|     #   #  #  #  #                                             | |     |                        
|#####|     #   #  #  #  #  %                                          | |     |                        
|#####|     #   #  #  #  #                                             | |     |                        
+-----+     #   ####  ####                                             | +-----+                        
#+END_SRC

** --- Line Differences ---
EXPECT:  24) dispint bits       : 000 11111 0000110 0111111 0111111 001
ACTUAL:  24) dispint bits       : 000 00000 0000000 0000000 0000000 000
EXPECT:  33) +-^^^-+     #   ####  ####     
EXPECT:  34) |#####|     #   #  #  #  #     
EXPECT:  35) |#####|     #   #  #  #  #     
EXPECT:  36) |#####|     #   #  #  #  #     
EXPECT:  37) |#####|     #   #  #  #  #  %  
EXPECT:  38) |#####|     #   #  #  #  #     
EXPECT:  39) +-----+     #   ####  ####     
ACTUAL:  33) +-^^^-+                        
ACTUAL:  34) |     |                        
ACTUAL:  35) |     |                        
ACTUAL:  36) |     |                        
ACTUAL:  37) |     |                        
ACTUAL:  38) |     |                        
ACTUAL:  39) +-----+                        

--- Valgrind Log from: test-results/raw/prob1-20-valgrd.tmp ---
==2198240== Memcheck, a memory error detector
==2198240== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2198240== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==2198240== Command: ./test_batt_update set_display_from_batt()\ 100\ %
==2198240== Parent PID: 2198239
==2198240== 
==2198240== Conditional jump or move depends on uninitialised value(s)
==2198240==    at 0x10B73A: bitstr (batt_sim.c:166)
==2198240==    by 0x10A70B: main (test_batt_update.c:371)
==2198240==  Uninitialised value was created by a heap allocation
==2198240==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==2198240==    by 0x109373: main (test_batt_update.c:39)
==2198240== 
==2198240== Conditional jump or move depends on uninitialised value(s)
==2198240==    at 0x10B56C: set_batt_display (batt_sim.c:122)
==2198240==    by 0x10B694: print_batt_display (batt_sim.c:140)
==2198240==    by 0x10A773: main (test_batt_update.c:377)
==2198240==  Uninitialised value was created by a heap allocation
==2198240==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==2198240==    by 0x109373: main (test_batt_update.c:39)
==2198240== 
==2198240== 
==2198240== HEAP SUMMARY:
==2198240==     in use at exit: 0 bytes in 0 blocks
==2198240==   total heap usage: 2 allocs, 2 frees, 8 bytes allocated
==2198240== 
==2198240== All heap blocks were freed -- no leaks are possible
==2198240== 
==2198240== For lists of detected and suppressed errors, rerun with: -s
==2198240== ERROR SUMMARY: 62 errors from 2 contexts (suppressed: 0 from 0)

